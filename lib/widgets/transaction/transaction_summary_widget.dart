// lib/widgets/transactions/transaction_summary_widget.dart
import 'package:flutter/material.dart';
import 'package:share_plus/share_plus.dart';
import '../../core/constants.dart';
import '../../models/transaction.dart';
import '../../services/export_service.dart';
import '../../widgets/export_dialog.dart';
import '../../widgets/custom_button.dart';

class TransactionSummaryWidget extends StatelessWidget {
  final List<Transaction> transactions;
  final String selectedPeriod;

  const TransactionSummaryWidget({
    super.key,
    required this.transactions,
    required this.selectedPeriod,
  });

  List<Transaction> _getFilteredTransactions() {
    final now = DateTime.now();
    switch (selectedPeriod) {
      case 'Today':
        return transactions
            .where(
              (t) =>
                  t.transactionDate != null &&
                  t.transactionDate!.day == now.day &&
                  t.transactionDate!.month == now.month &&
                  t.transactionDate!.year == now.year,
            )
            .toList();
      case 'Last 7 Days':
        final weekAgo = now.subtract(const Duration(days: 7));
        return transactions
            .where(
              (t) =>
                  t.transactionDate != null &&
                  t.transactionDate!.isAfter(weekAgo),
            )
            .toList();
      case 'Last 30 Days':
        final monthAgo = now.subtract(const Duration(days: 30));
        return transactions
            .where(
              (t) =>
                  t.transactionDate != null &&
                  t.transactionDate!.isAfter(monthAgo),
            )
            .toList();
      default:
        return transactions;
    }
  }

  void _showExportDialog(BuildContext context) {
    final filteredTransactions = _getFilteredTransactions();

    if (filteredTransactions.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('No transactions to export'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    final exportData = ExportData(
      title: 'Transaction History',
      subtitle: 'Complete transaction records for $selectedPeriod',
      userData: {
        'username': 'Current User', // You can get this from provider
        'account_number': 'Account Number',
        'account_type': 'Account Type',
      },
      tableData:
          filteredTransactions
              .map(
                (transaction) => {
                  'date':
                      transaction.transactionDate?.toString().split(' ')[0] ??
                      'N/A',
                  'type': transaction.transactionType ?? 'N/A',
                  'description': transaction.description ?? 'Transaction',
                  'amount': '\${transaction.amount.toStringAsFixed(2)}',
                  'status': transaction.status,
                },
              )
              .toList(),
      headers: ['Date', 'Type', 'Description', 'Amount', 'Status'],
      summary: {
        'Total Transactions': filteredTransactions.length.toString(),
        'Period': selectedPeriod,
        'Generated': DateTime.now().toString().split(' ')[0],
      },
    );

    ExportDialogHelper.show(
      context: context,
      exportData: exportData,
      title: 'Export Transaction History',
    );
  }

  void _shareTransactions() async {
    final filteredTransactions = _getFilteredTransactions();

    if (filteredTransactions.isEmpty) return;

    final totalAmount = filteredTransactions.fold<double>(
      0.0,
      (sum, transaction) => sum + transaction.amount,
    );

    final shareText = '''
Transaction Summary - $selectedPeriod

Total Transactions: ${filteredTransactions.length}
Total Amount: \$${totalAmount.toStringAsFixed(2)}
Period: $selectedPeriod

Generated by KÃ–B Banking
''';

    await Share.share(
      shareText,
      subject: 'Transaction Summary - $selectedPeriod',
    );
  }

  @override
  Widget build(BuildContext context) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    final filteredTransactions = _getFilteredTransactions();

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            AppColors.primaryGreen.withOpacity(0.1),
            AppColors.primaryDark.withOpacity(0.1),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: AppColors.primaryGreen.withOpacity(0.2)),
      ),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              _buildSummaryItem(
                'Total Transactions',
                filteredTransactions.length.toString(),
                Icons.receipt_long,
                isDarkMode,
              ),
              Container(
                width: 1,
                height: 40,
                color: isDarkMode ? Colors.white12 : Colors.black12,
              ),
              _buildSummaryItem(
                'Period',
                selectedPeriod,
                Icons.calendar_today,
                isDarkMode,
              ),
            ],
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: CustomButton(
                  text: 'Share',
                  onPressed: _shareTransactions,
                  isPrimary: false,
                  icon: Icons.share,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: CustomButton(
                  text: 'Export PDF',
                  onPressed: () => _showExportDialog(context),
                  isPrimary: true,
                  icon: Icons.download,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildSummaryItem(
    String label,
    String value,
    IconData icon,
    bool isDarkMode,
  ) {
    return Column(
      children: [
        Icon(icon, color: AppColors.primaryGreen, size: 24),
        const SizedBox(height: 8),
        Text(
          value,
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: isDarkMode ? Colors.white : AppColors.darkText,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            fontSize: 12,
            color: isDarkMode ? Colors.white70 : AppColors.lightText,
          ),
        ),
      ],
    );
  }
}
